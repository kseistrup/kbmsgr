#!/usr/bin/env bash
# -*- mode: sh; coding: utf-8 -*-
ME="${0##*/}"
MYPATH="${0}"
KBROOT='/keybase/private'
SUBDIR='messages'
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose.  See the GNU General Public License for  #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

MY_APPNAME='kbmsgr'
MY_AUTHOR='Klaus Alexander Seistrup <klaus@seistrup.dk>'
MY_REVISION='2017-02-28'
MY_VERSION="0.2.0 (${MY_REVISION})"
MY_COPYRIGHT="\
kbmsgr/${MY_VERSION}
Copyright © 2016,2017 ${MY_AUTHOR}

This is free software; see the source for copying conditions.  There is no
warranty; not even for merchantability or fitness for a particular purpose.\
"
MY_HELP="\
usage: ${ME} [OPTIONS] <OTHER>

positional arguments:
  OTHER                recipient's keybase username

options:
  -h, --help           display this help and exit
  -v, --version        output version information and exit
  -c, --copyright      show copying policy and exit
  -r, --requirements   show required components\
"
MY_REQUIREMENTS="\
keybase
awk
lockfile
stat
tmux\
"

die () {
  [[ -n "${1}" ]] && {
    echo "${ME}:" "${@}" >&2
    exit 1
  }
  exit 0
}

my_help () {
  echo "${MY_HELP}"
}

my_version () {
  echo "${MY_APPNAME}/${MY_VERSION}"
}

my_copyright () {
  echo "${MY_COPYRIGHT}"
}

get_username () {
  local status="${*}"
  local username
  local loggedin

  # We're screwed here if keybase is localized…

  # Look for "Username: $self"
  username=$(
    echo "${status}" | awk '/^Username:/ { print $2 }'
  )
  [[ -z "${username}" ]] && {
    die 'cannot determine your username'
  }

  # Look for "Logged in: yes|no"
  loggedin=$(
    echo "${status}" | awk '/^Logged in:/ { print $3 }'
  )
  [[ "${loggedin}" == "yes" ]] || {
    die 'please make sure keybase is running and that you are logged in'
  }

  echo "${username}"
}

check_requirements () {
  local requirement

  for requirement in ${MY_REQUIREMENTS}
  do
    which "${requirement}" >/dev/null 2>&1 || {
      die "requirement not found: ${requirement}"
    }
  done
}

main () {
  local tui="${MYPATH}-tui"
  local other="${1}"
  local kbroot="${KBROOT}"
  local status
  local msgdir
  local self

  case "${1}" in
    -h | --help )
      my_help
      die
    ;;
    -v | --version )
      my_version
      die
    ;;
    -c | --copyright )
      my_copyright
      die
    ;;
    -r | --requirements )
      echo "${MY_REQUIREMENTS}"
      die
    ;;
    -* )
      die "unrecognized option ‘${1}’"
    ;;
  esac

  check_requirements

  [[ "${#}" -gt 1 ]] && {
    die "this version of ${ME} only takes one argument: OTHER"
  }
  status="$(keybase status)"
  self="$(get_username "${status}")"

  [[ -z "${self}" ]] && die 'cannot determine your username'
  [[ -z "${other}" ]] && die 'missing positional argument: OTHER'

  [[ -d "${kbroot}" ]] || die "no such directory: ${kbroot}"

  if [[ -d "${kbroot}/${other},${self}/." ]]; then
    msgdir="${kbroot}/${other},${self}/${SUBDIR}"
  else
    msgdir="${kbroot}/${self},${other}/${SUBDIR}"
  fi

  [[ -d "${msgdir}" ]] || {
    mkdir -p "${msgdir}" \
    || die "cannot create directory ‘${msgdir}’"
    touch "${msgdir}/${self}.txt" \
    || die "cannot create file ‘${msgdir}/${self}.txt’"
    touch "${msgdir}/${other}.txt" \
    || die "cannot create file ‘${msgdir}/${other}.txt’"
  }

  [[ -x "${tui}" ]] && {
    exec "${tui}" "${self}" "${other}" "${msgdir}"
  }
  die "cannot find ${tui}"
}

main "${@}"

:
# eof
